{"ast":null,"code":"import deepmerge from 'deepmerge'; // Cannot import from the @ngrx/store package due to a module resolution issue.\n// See Issue #206.\n\nconst INIT_ACTION = '@ngrx/store/init';\nconst UPDATE_ACTION = '@ngrx/store/update-reducers';\nconst detectDate = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})/; // correctly parse dates from local storage\n\nconst dateReviver = (_key, value) => {\n  if (typeof value === 'string' && detectDate.test(value)) {\n    return new Date(value);\n  }\n\n  return value;\n};\n\nconst dummyReviver = (_key, value) => value;\n\nconst checkIsBrowserEnv = () => {\n  return typeof window !== 'undefined';\n};\n\nconst validateStateKeys = keys => {\n  return keys.map(key => {\n    let attr = key;\n\n    if (typeof key === 'object') {\n      attr = Object.keys(key)[0];\n    }\n\n    if (typeof attr !== 'string') {\n      throw new TypeError(`localStorageSync Unknown Parameter Type: ` + `Expected type of string, got ${typeof attr}`);\n    }\n\n    return key;\n  });\n};\n\nconst rehydrateApplicationState = (keys, storage, storageKeySerializer, restoreDates) => {\n  return keys.reduce((acc, curr) => {\n    let key = curr;\n    let reviver = restoreDates ? dateReviver : dummyReviver;\n    let deserialize;\n    let decrypt;\n\n    if (typeof key === 'object') {\n      key = Object.keys(key)[0]; // use the custom reviver function\n\n      if (typeof curr[key] === 'function') {\n        reviver = curr[key];\n      } else {\n        // use custom reviver function if available\n        if (curr[key].reviver) {\n          reviver = curr[key].reviver;\n        } // use custom serialize function if available\n\n\n        if (curr[key].deserialize) {\n          deserialize = curr[key].deserialize;\n        }\n      } // Ensure that encrypt and decrypt functions are both present\n\n\n      if (curr[key].encrypt && curr[key].decrypt) {\n        if (typeof curr[key].encrypt === 'function' && typeof curr[key].decrypt === 'function') {\n          decrypt = curr[key].decrypt;\n        } else {\n          console.error(`Either encrypt or decrypt is not a function on '${curr[key]}' key object.`);\n        }\n      } else if (curr[key].encrypt || curr[key].decrypt) {\n        // Let know that one of the encryption functions is not provided\n        console.error(`Either encrypt or decrypt function is not present on '${curr[key]}' key object.`);\n      }\n    }\n\n    if (storage !== undefined) {\n      let stateSlice = storage.getItem(storageKeySerializer(key));\n\n      if (stateSlice) {\n        // Use provided decrypt function\n        if (decrypt) {\n          stateSlice = decrypt(stateSlice);\n        }\n\n        const isObjectRegex = new RegExp('{|\\\\[');\n        let raw = stateSlice;\n\n        if (stateSlice === 'null' || stateSlice === 'true' || stateSlice === 'false' || isObjectRegex.test(stateSlice.charAt(0))) {\n          raw = JSON.parse(stateSlice, reviver);\n        }\n\n        return Object.assign({}, acc, {\n          [key]: deserialize ? deserialize(raw) : raw\n        });\n      }\n    }\n\n    return acc;\n  }, {});\n}; // Recursively traverse all properties of the existing slice as defined by the `filter` argument,\n// and output the new object with extraneous properties removed.\n\n\nfunction createStateSlice(existingSlice, filter) {\n  return filter.reduce((memo, attr) => {\n    if (typeof attr === 'string' || typeof attr === 'number') {\n      const value = existingSlice?.[attr];\n\n      if (value !== undefined) {\n        memo[attr] = value;\n      }\n    } else {\n      for (const key in attr) {\n        if (Object.prototype.hasOwnProperty.call(attr, key)) {\n          const element = attr[key];\n          memo[key] = createStateSlice(existingSlice[key], element);\n        }\n      }\n    }\n\n    return memo;\n  }, {});\n}\n\nconst syncStateUpdate = (state, keys, storage, storageKeySerializer, removeOnUndefined, syncCondition) => {\n  if (syncCondition) {\n    try {\n      if (syncCondition(state) !== true) {\n        return;\n      }\n    } catch (e) {\n      // Treat TypeError as do not sync\n      if (e instanceof TypeError) {\n        return;\n      }\n\n      throw e;\n    }\n  }\n\n  keys.forEach(key => {\n    let stateSlice = state[key];\n    let replacer;\n    let space;\n    let encrypt;\n\n    if (typeof key === 'object') {\n      let name = Object.keys(key)[0];\n      stateSlice = state[name];\n\n      if (typeof stateSlice !== 'undefined' && key[name]) {\n        // use serialize function if specified.\n        if (key[name].serialize) {\n          stateSlice = key[name].serialize(stateSlice);\n        } else {\n          // if serialize function is not specified filter on fields if an array has been provided.\n          let filter;\n\n          if (key[name].reduce) {\n            filter = key[name];\n          } else if (key[name].filter) {\n            filter = key[name].filter;\n          }\n\n          if (filter) {\n            stateSlice = createStateSlice(stateSlice, filter);\n          } // Check if encrypt and decrypt are present, also checked at this#rehydrateApplicationState()\n\n\n          if (key[name].encrypt && key[name].decrypt) {\n            if (typeof key[name].encrypt === 'function') {\n              encrypt = key[name].encrypt;\n            }\n          } else if (key[name].encrypt || key[name].decrypt) {\n            // If one of those is not present, then let know that one is missing\n            console.error(`Either encrypt or decrypt function is not present on '${key[name]}' key object.`);\n          }\n        }\n        /*\n        Replacer and space arguments to pass to JSON.stringify.\n        If these fields don't exist, undefined will be passed.\n        */\n\n\n        replacer = key[name].replacer;\n        space = key[name].space;\n      }\n\n      key = name;\n    }\n\n    if (typeof stateSlice !== 'undefined' && storage !== undefined) {\n      try {\n        if (encrypt) {\n          // ensure that a string message is passed\n          stateSlice = encrypt(typeof stateSlice === 'string' ? stateSlice : JSON.stringify(stateSlice, replacer, space));\n        }\n\n        storage.setItem(storageKeySerializer(key), typeof stateSlice === 'string' ? stateSlice : JSON.stringify(stateSlice, replacer, space));\n      } catch (e) {\n        console.warn('Unable to save state to localStorage:', e);\n      }\n    } else if (typeof stateSlice === 'undefined' && removeOnUndefined && storage !== undefined) {\n      try {\n        storage.removeItem(storageKeySerializer(key));\n      } catch (e) {\n        console.warn(`Exception on removing/cleaning undefined '${key}' state`, e);\n      }\n    }\n  });\n}; // Default merge strategy is a full deep merge.\n\n\nconst defaultMergeReducer = (state, rehydratedState, action) => {\n  if ((action.type === INIT_ACTION || action.type === UPDATE_ACTION) && rehydratedState) {\n    const overwriteMerge = (destinationArray, sourceArray, options) => sourceArray;\n\n    const options = {\n      arrayMerge: overwriteMerge\n    };\n    state = deepmerge(state, rehydratedState, options);\n  }\n\n  return state;\n};\n\nconst localStorageSync = config => reducer => {\n  if (config.storage === undefined && !config.checkStorageAvailability || config.checkStorageAvailability && checkIsBrowserEnv()) {\n    config.storage = localStorage || window.localStorage;\n  }\n\n  if (config.storageKeySerializer === undefined) {\n    config.storageKeySerializer = key => key;\n  }\n\n  if (config.restoreDates === undefined) {\n    config.restoreDates = true;\n  } // Use default merge reducer.\n\n\n  let mergeReducer = config.mergeReducer;\n\n  if (mergeReducer === undefined || typeof mergeReducer !== 'function') {\n    mergeReducer = defaultMergeReducer;\n  }\n\n  const stateKeys = validateStateKeys(config.keys);\n  const rehydratedState = config.rehydrate ? rehydrateApplicationState(stateKeys, config.storage, config.storageKeySerializer, config.restoreDates) : undefined;\n  return function (state, action) {\n    let nextState; // If state arrives undefined, we need to let it through the supplied reducer\n    // in order to get a complete state as defined by user\n\n    if (action.type === INIT_ACTION && !state) {\n      nextState = reducer(state, action);\n    } else {\n      nextState = { ...state\n      };\n    } // Merge the store state with the rehydrated state using\n    // either a user-defined reducer or the default.\n\n\n    nextState = mergeReducer(nextState, rehydratedState, action);\n    nextState = reducer(nextState, action);\n\n    if (action.type !== INIT_ACTION) {\n      syncStateUpdate(nextState, stateKeys, config.storage, config.storageKeySerializer, config.removeOnUndefined, config.syncCondition);\n    }\n\n    return nextState;\n  };\n};\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { dateReviver, defaultMergeReducer, localStorageSync, rehydrateApplicationState, syncStateUpdate };","map":{"version":3,"names":["deepmerge","INIT_ACTION","UPDATE_ACTION","detectDate","dateReviver","_key","value","test","Date","dummyReviver","checkIsBrowserEnv","window","validateStateKeys","keys","map","key","attr","Object","TypeError","rehydrateApplicationState","storage","storageKeySerializer","restoreDates","reduce","acc","curr","reviver","deserialize","decrypt","encrypt","console","error","undefined","stateSlice","getItem","isObjectRegex","RegExp","raw","charAt","JSON","parse","assign","createStateSlice","existingSlice","filter","memo","prototype","hasOwnProperty","call","element","syncStateUpdate","state","removeOnUndefined","syncCondition","e","forEach","replacer","space","name","serialize","stringify","setItem","warn","removeItem","defaultMergeReducer","rehydratedState","action","type","overwriteMerge","destinationArray","sourceArray","options","arrayMerge","localStorageSync","config","reducer","checkStorageAvailability","localStorage","mergeReducer","stateKeys","rehydrate","nextState"],"sources":["C:/Users/pasha/source/repos/InforceTask/InforceTask/ClientApp/node_modules/ngrx-store-localstorage/fesm2020/ngrx-store-localstorage.mjs"],"sourcesContent":["import deepmerge from 'deepmerge';\n\n// Cannot import from the @ngrx/store package due to a module resolution issue.\n// See Issue #206.\nconst INIT_ACTION = '@ngrx/store/init';\nconst UPDATE_ACTION = '@ngrx/store/update-reducers';\nconst detectDate = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})/;\n// correctly parse dates from local storage\nconst dateReviver = (_key, value) => {\n    if (typeof value === 'string' && detectDate.test(value)) {\n        return new Date(value);\n    }\n    return value;\n};\nconst dummyReviver = (_key, value) => value;\nconst checkIsBrowserEnv = () => {\n    return typeof window !== 'undefined';\n};\nconst validateStateKeys = (keys) => {\n    return keys.map((key) => {\n        let attr = key;\n        if (typeof key === 'object') {\n            attr = Object.keys(key)[0];\n        }\n        if (typeof attr !== 'string') {\n            throw new TypeError(`localStorageSync Unknown Parameter Type: ` + `Expected type of string, got ${typeof attr}`);\n        }\n        return key;\n    });\n};\nconst rehydrateApplicationState = (keys, storage, storageKeySerializer, restoreDates) => {\n    return keys.reduce((acc, curr) => {\n        let key = curr;\n        let reviver = restoreDates ? dateReviver : dummyReviver;\n        let deserialize;\n        let decrypt;\n        if (typeof key === 'object') {\n            key = Object.keys(key)[0];\n            // use the custom reviver function\n            if (typeof curr[key] === 'function') {\n                reviver = curr[key];\n            }\n            else {\n                // use custom reviver function if available\n                if (curr[key].reviver) {\n                    reviver = curr[key].reviver;\n                }\n                // use custom serialize function if available\n                if (curr[key].deserialize) {\n                    deserialize = curr[key].deserialize;\n                }\n            }\n            // Ensure that encrypt and decrypt functions are both present\n            if (curr[key].encrypt && curr[key].decrypt) {\n                if (typeof curr[key].encrypt === 'function' && typeof curr[key].decrypt === 'function') {\n                    decrypt = curr[key].decrypt;\n                }\n                else {\n                    console.error(`Either encrypt or decrypt is not a function on '${curr[key]}' key object.`);\n                }\n            }\n            else if (curr[key].encrypt || curr[key].decrypt) {\n                // Let know that one of the encryption functions is not provided\n                console.error(`Either encrypt or decrypt function is not present on '${curr[key]}' key object.`);\n            }\n        }\n        if (storage !== undefined) {\n            let stateSlice = storage.getItem(storageKeySerializer(key));\n            if (stateSlice) {\n                // Use provided decrypt function\n                if (decrypt) {\n                    stateSlice = decrypt(stateSlice);\n                }\n                const isObjectRegex = new RegExp('{|\\\\[');\n                let raw = stateSlice;\n                if (stateSlice === 'null' || stateSlice === 'true' || stateSlice === 'false' || isObjectRegex.test(stateSlice.charAt(0))) {\n                    raw = JSON.parse(stateSlice, reviver);\n                }\n                return Object.assign({}, acc, {\n                    [key]: deserialize ? deserialize(raw) : raw,\n                });\n            }\n        }\n        return acc;\n    }, {});\n};\n// Recursively traverse all properties of the existing slice as defined by the `filter` argument,\n// and output the new object with extraneous properties removed.\nfunction createStateSlice(existingSlice, filter) {\n    return filter.reduce((memo, attr) => {\n        if (typeof attr === 'string' || typeof attr === 'number') {\n            const value = existingSlice?.[attr];\n            if (value !== undefined) {\n                memo[attr] = value;\n            }\n        }\n        else {\n            for (const key in attr) {\n                if (Object.prototype.hasOwnProperty.call(attr, key)) {\n                    const element = attr[key];\n                    memo[key] = createStateSlice(existingSlice[key], element);\n                }\n            }\n        }\n        return memo;\n    }, {});\n}\nconst syncStateUpdate = (state, keys, storage, storageKeySerializer, removeOnUndefined, syncCondition) => {\n    if (syncCondition) {\n        try {\n            if (syncCondition(state) !== true) {\n                return;\n            }\n        }\n        catch (e) {\n            // Treat TypeError as do not sync\n            if (e instanceof TypeError) {\n                return;\n            }\n            throw e;\n        }\n    }\n    keys.forEach((key) => {\n        let stateSlice = state[key];\n        let replacer;\n        let space;\n        let encrypt;\n        if (typeof key === 'object') {\n            let name = Object.keys(key)[0];\n            stateSlice = state[name];\n            if (typeof stateSlice !== 'undefined' && key[name]) {\n                // use serialize function if specified.\n                if (key[name].serialize) {\n                    stateSlice = key[name].serialize(stateSlice);\n                }\n                else {\n                    // if serialize function is not specified filter on fields if an array has been provided.\n                    let filter;\n                    if (key[name].reduce) {\n                        filter = key[name];\n                    }\n                    else if (key[name].filter) {\n                        filter = key[name].filter;\n                    }\n                    if (filter) {\n                        stateSlice = createStateSlice(stateSlice, filter);\n                    }\n                    // Check if encrypt and decrypt are present, also checked at this#rehydrateApplicationState()\n                    if (key[name].encrypt && key[name].decrypt) {\n                        if (typeof key[name].encrypt === 'function') {\n                            encrypt = key[name].encrypt;\n                        }\n                    }\n                    else if (key[name].encrypt || key[name].decrypt) {\n                        // If one of those is not present, then let know that one is missing\n                        console.error(`Either encrypt or decrypt function is not present on '${key[name]}' key object.`);\n                    }\n                }\n                /*\n          Replacer and space arguments to pass to JSON.stringify.\n          If these fields don't exist, undefined will be passed.\n        */\n                replacer = key[name].replacer;\n                space = key[name].space;\n            }\n            key = name;\n        }\n        if (typeof stateSlice !== 'undefined' && storage !== undefined) {\n            try {\n                if (encrypt) {\n                    // ensure that a string message is passed\n                    stateSlice = encrypt(typeof stateSlice === 'string' ? stateSlice : JSON.stringify(stateSlice, replacer, space));\n                }\n                storage.setItem(storageKeySerializer(key), typeof stateSlice === 'string' ? stateSlice : JSON.stringify(stateSlice, replacer, space));\n            }\n            catch (e) {\n                console.warn('Unable to save state to localStorage:', e);\n            }\n        }\n        else if (typeof stateSlice === 'undefined' && removeOnUndefined && storage !== undefined) {\n            try {\n                storage.removeItem(storageKeySerializer(key));\n            }\n            catch (e) {\n                console.warn(`Exception on removing/cleaning undefined '${key}' state`, e);\n            }\n        }\n    });\n};\n// Default merge strategy is a full deep merge.\nconst defaultMergeReducer = (state, rehydratedState, action) => {\n    if ((action.type === INIT_ACTION || action.type === UPDATE_ACTION) && rehydratedState) {\n        const overwriteMerge = (destinationArray, sourceArray, options) => sourceArray;\n        const options = {\n            arrayMerge: overwriteMerge,\n        };\n        state = deepmerge(state, rehydratedState, options);\n    }\n    return state;\n};\nconst localStorageSync = (config) => (reducer) => {\n    if ((config.storage === undefined && !config.checkStorageAvailability) ||\n        (config.checkStorageAvailability && checkIsBrowserEnv())) {\n        config.storage = localStorage || window.localStorage;\n    }\n    if (config.storageKeySerializer === undefined) {\n        config.storageKeySerializer = (key) => key;\n    }\n    if (config.restoreDates === undefined) {\n        config.restoreDates = true;\n    }\n    // Use default merge reducer.\n    let mergeReducer = config.mergeReducer;\n    if (mergeReducer === undefined || typeof mergeReducer !== 'function') {\n        mergeReducer = defaultMergeReducer;\n    }\n    const stateKeys = validateStateKeys(config.keys);\n    const rehydratedState = config.rehydrate\n        ? rehydrateApplicationState(stateKeys, config.storage, config.storageKeySerializer, config.restoreDates)\n        : undefined;\n    return function (state, action) {\n        let nextState;\n        // If state arrives undefined, we need to let it through the supplied reducer\n        // in order to get a complete state as defined by user\n        if (action.type === INIT_ACTION && !state) {\n            nextState = reducer(state, action);\n        }\n        else {\n            nextState = { ...state };\n        }\n        // Merge the store state with the rehydrated state using\n        // either a user-defined reducer or the default.\n        nextState = mergeReducer(nextState, rehydratedState, action);\n        nextState = reducer(nextState, action);\n        if (action.type !== INIT_ACTION) {\n            syncStateUpdate(nextState, stateKeys, config.storage, config.storageKeySerializer, config.removeOnUndefined, config.syncCondition);\n        }\n        return nextState;\n    };\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { dateReviver, defaultMergeReducer, localStorageSync, rehydrateApplicationState, syncStateUpdate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}